//multiplexer module

module multiplexer_8_1(
    output Y,
    input S0,
    input S1,
    input S2,
    input I0,
    input I1,
    input I2,
    input I3,
    input I4,
    input I5,
    input I6,
    input I7
    );
    assign Y=S0==0?S1==0?S2==0?I0:I1:S2==0?I2:I3:S1==0?S2==0?I4:I5:S2==0?I6:I7;
endmodule

//multiplexer function implementation

module multiplexer_func(
    output F,
    input A,
    input B,
    input C,
    input D
    );
    multiplexer_8_1 m1(F,C,B,A,D,D,~D,1'b0,1'b0,D,1'b1,1'b1);
endmodule

//multiplexer testbench code

module funcimpl();
    wire F;
    reg A,B,C,D;
    multiplexer_func dut(F,A,B,C,D);
    initial
    begin
    A=0;B=0;C=0;D=0;#40
    A=0;B=0;C=0;D=1;#40
    A=0;B=0;C=1;D=0;#40
    A=0;B=0;C=1;D=1;#40
    A=0;B=1;C=0;D=0;#40
    A=0;B=1;C=0;D=1;#40
    A=0;B=1;C=1;D=0;#40
    A=0;B=1;C=1;D=1;#40
    A=1;B=0;C=0;D=0;#40
    A=1;B=0;C=0;D=1;#40
    A=1;B=0;C=1;D=0;#40
    A=1;B=0;C=1;D=1;#40
    A=1;B=1;C=0;D=0;#40
    A=1;B=1;C=0;D=1;#40
    A=1;B=1;C=1;D=0;#40
    A=1;B=1;C=1;D=1;#40
    $finish;
    end
endmodule
123
